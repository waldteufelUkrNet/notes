класи
================================================================================

ВИЗНАЧЕННЯ
----------
Класи - це функції-конструктори, в результаті виклику вертають створений об'єкт-
екземпляр класу.


СТРУКТУРА
---------

    class SomeClass {

      constructor(name) {
        super(name);             // перевизначення конструктора вимагає виклик
                                 // батьківського
        this.name = name;        // властивості, оголошені в конструкторі,
                                 // стають властивостями об'єкта
      }

      method1() {                // методи, оголошені в конструкторі,
                                 // потрапляють в прототип SomeClass.prototype
        super.someParentMethod() // виклик батьківського методу всередині свого
      }

      static method2() {…}       // метод класу, а не створюваних ним об'єктів.
                                 // Те саме, що і:
                                 // SomeClass.method = function(){…}

      static property = "value", // властивість класу, а не створюваних ним
                                 // об'єктів. Те саме, що і:
                                 // SomeClass.property = "value"

      property2 = "value",       // властивості, оголошені поза конструктором,
                                 // теж стають властивостями об'єкта (але може
                                 // бути потрібен поліфіл)

      _protected = "value",      // захищена властивість

      set protectedProp(value){  // сеттер для захищеної властивості, без нього
                                 // властивість буде доступна тільки на читання
        this._protected = value;
      }

      get protectedProp(){       // геттер для захищеної властивості
      return this._protected;
      }

      #private = "value",        // приватна властивість класу

      #method3() {}              // приватний метод класу
    }


НАСЛІДУВАННЯ КЛАСІВ
-------------------

І. Об'єкт - об'єкт
------------------

    let obj1 = {…};

    a) let obj2 = {__proto__: obj1};

    б) let obj2 = {…};
       obj2.__proto__ = obj1;

    в) let obj2 = Object.create(obj1);

    г) let obj2 = {…};
       Object.setPrototypeOf(obj2,obj1);


II. Конструктор - об'єкт
------------------------

    let a = {…};

    a) function Foo() {
         this.__proto__ = a;
       }

    б) function Foo() {…}
       Foo.prototype = a;

     -------------------------------
    | obj.__proto__ = Foo.prototype |
     -------------------------------

    default prototype:

      Foo.prototype = {
        constructor : Foo;
      }

       ----------------------------------
      | Foo.prototype.constructor = Foo; |
      | obj.__proto__.constructor = Foo; |
       ----------------------------------

      або напряму через прототип:

       ------------------------
      | obj.constructor = Foo; |
       ------------------------


ІІІ. Конструктор - конструктор
------------------------------

    class Child extends Parent {…}

    така форма запису робить наступне:

    Child.prototype.__proto__ = Parent.prototype
    Child.__proto__ = Parent                     // це для статики