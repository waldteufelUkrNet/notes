Custom Elements
================================================================================

ЩО ЦЕ ТАКЕ
----------

Custom Elements - це можливість створювати свої елементи DOM (теги) та
налаштовувати їх поведінку.

СПЕЦИФІКАЦІЯ
------------
https://dom.spec.whatwg.org/#shadow-trees

https://www.webcomponents.org/introduction


СТВОРЕННЯ Custom Elements
-------------------------

Є два способи створити свої елементи:

1. Створити повністю нові, на базі класу HTMLElement,
2. Створити на базі існуючих, модифікувавши їх.

Ім'я тегу повинно містити дефіс.

Якщо браузер відмальовує тег <my-el>, ще не знаючи про його прив'язку до
конкретного класу, це не буде помилкою. Коли браузер буде опрацьовувати команду
в скрипті customElements.define('my-el', MyElement), він прив'яже тег до класу і
викличе connectedCallback.

Поки тег не відомий браузеру, його можна стилізувати за допомогою CSS-селектора
:not(:defined).

Якщо новостворений користувацький елемент пробує отримати innerHTML в методі
connectedCallback(){…} (тобто одразу після створення), він нічого не отримає, бо
його дочірні елементи (або текстові дані) ще не встигли відмалюватися.
Атрибути елемента доступні одразу.


НОВІ ЕЛЕМЕНТИ
-------------

    // створення класу під новий елемент
    class MyElement extends HTMLElement {
      constructor() {
        super()
      }

      // спрацьовує при появі елементу в документі, рендеринг елемента
      // відбувається тут, а не в constructor
      connectedCallback(){…}

      // спрацьовує при видаленні елементу з документу
      disconnectedCallback(){…}

      // масив атрибутів елементу для відслідковування змін
      static get observedAttributes(){…}

      // спрацьовує при зміні атрубуту елементу (з масиву)
      attributeChangedCallback(name, oldValue, newValue){…}

      // спрацьовує, коли елемент переміщується у новий документ
      adoptedCallback(){…}
    }

    // прив'язка тегу <my-el> до класу MyElement
    customElements.define('my-el', MyElement);


МОДИФІКОВАНІ ВБУДОВАНІ ЕЛЕМЕНТИ
-------------------------------

js:
    class MyButton extends HTMLButtonElement {
      …
    }
    customElements.define('my-btn', MyButton, {extends: 'button'});

html (тег залишається стандартний, модифікація вказується у атрибуті is='…'):

    <button is="my-btn">…</button>


МЕТОДИ customElements
---------------------

    customElements.get(name)         // повертає клас елемента за його тегом
    customElements.whenDefined(name) // повертає проміс, який стає fulfilled
                                     // (без значення), коли тег елементу
                                     // прив'язується до класу.


Shadow DOM
----------

Отримати доступ до тіньового DOM через js-виклики або css-селектори не можливо.

Якщо елемент має і звичайне, і тіньове дерево, браузер відмальовує тільки тінь.

Тіньове дерево можна використовувати в Custom Elements, щоб заховати нутрощі
компонента і застосувати до нього локальні стилі. Cтилі зовнішнього DOM на тінь
не розповсюджуються.

Щоб побачити Shadow DOM в інспекторі Firefox, потрібно зайти на about:config та
в пункті меню devtools.inspector.showUserAgentShadowRoots поставити true.

    elem.attachShadow({mode: …}); // 'open'   - корінь тіні доступний через
                                  //            elem.shadowRoot
                                  // 'closed' - elem.shadowRoot завжди null,
                                  //            тінь доступна через посилання,
                                  //            яке повертає elem.attachShadow

     --------------------------------------------------------
    | let shadow = elem.attachShadow({mode: 'open'});        |
    | shadow === document.querySelector('my-el').shadowRoot; |
     --------------------------------------------------------

Створення тіньового дерева:

    shadow.innerHTML = '…';

У якості elem може бути користувацький елемент або: article, aside, blockquote,
body, div, footer, h1…h6, header, main, nav, p, section, span.

Кожен елемент може мати тільки одну тінь.

Якщо mode:"open", з elem.shadowRoot можна працювати, як зі звичайним DOM-вузлом.

     -------------------------------
    | elem.shadowRoot.host === elem |
     -------------------------------

Пошук по тіньовому DOM-дереву:

    elem.shadowRoot.querySelector(…);


ВИКОРИСТАННЯ СТАНДАРТНОГО HTML-ТЕГУ <template> ДЛЯ Shadow DOM
-------------------------------------------------------------

Тег <template>…</template> призначений для збереження шаблонів HTML. Браузер
перевіряє синтаксис, але повністю ігнорує його вміст (не модифікує, вставляючи
додаткові теги для валідності). Може містити <style> та <script>, які не
виконуватимуться.

Вміст <template> доступний через document.querySelector('template').content. Він
є DocumentFragment, тобто при копіюванні і вставці сам тег не вставляється, а
тільки його діти.

    <template id="tmpl">
      <style> p { font-weight: bold; } </style>
      <p id="message"></p>
    </template>

    <div id="elem">Натисни на мене</div>

    <script>
      elem.onclick = function() {
        elem.attachShadow({mode: 'open'});

        elem.shadowRoot.append(tmpl.content.cloneNode(true));

        elem.shadowRoot.getElementById('message').innerHTML = "Привіт із тіні!";
      };
    </script>

Якщо вставляти tmpl.content, без клонування, то в результаті <template> стане
пустим, одноразовим.


КОМПОЗИЦІЯ СВІТЛОГО І ТЕМНОГО DOM ("ВІРТУАЛЬНИЙ", РОЗГОРНУТИЙ DOM)
------------------------------------------------------------------

Є можливість створювати комбінацію світлого і темного DOM, вставляючи елементи
зі світлого DOM у тінь. Для цього у дочірніх елементів ПЕРШОГО порядку вказують
атрибут slot="…", а в тіньовому DOM-дереві прописують тег <slot name="…"></slot>
В результаті рендерингу браузер вставить теги з атрибутом slot="…" в тег <slot>
з тим самим іменем.

Фактично розташування вузлів у документі не змінюється, вставка тегів у тінь
відбувається "віртуально", JS бачить структуру DOM "як є", до побудови
розгорнутого дерева. Розгорнуту структуру використовує браузер для коректного
рендерингу та сплиття подій.

    <script>
      customElements.define('user-card', class extends HTMLElement {
        connectedCallback() {
          this.attachShadow({mode: 'open'});
          this.shadowRoot.innerHTML = `
            <div>Ім'я:
              <slot name="username"></slot>
            </div>
            <div>Дата народження:
              <slot name="birthday"></slot>
            </div>
          `;
        }
      });
    </script>

    <user-card>
      <span slot="username">Іван Іванович</span>
      <span slot="birthday">01.01.2001</span>
    </user-card>

результат, яким його бачить інспектор браузера та JS:

    <user-card>
      #shadow-root
        <div>Ім'я:
          <slot name="username"></slot>
        </div>
        <div>Дата народження:
          <slot name="birthday"></slot>
        </div>
      <span slot="username">Іван Іванович</span>
      <span slot="birthday">01.01.2001</span>
    </user-card>

результат, який відмальовується браузером і який використовується для сплиття
подій:

    <user-card>
      #shadow-root
        <div>Ім'я:
          <slot name="username">
            <!-- елемент слоту вставляється в слот -->
            <span slot="username">Іван Іванович</span>
          </slot>
        </div>
        <div>Дата народження:
          <slot name="birthday">
            <span slot="birthday">01.01.2001</span>
          </slot>
        </div>
    </user-card>

У слоті <slot name="…"></slot> тіньового дерева можна вказувати "значення за
замовчуванням". Воно відображатиметься, якщо у світлому дереві не буде тегу з
відповідним іменем в атрибуті slot="…".

  <div>:
    <slot name="…">default HTML</slot>
  </div>

Перший <slot> в тіньовому дереві без атрибуту name є слотом за замовчуванням. В
ньому будуть відображатися усі вузли світлого дерева, що не були додані в інші
слоти (тобто усі ті теги, що не мають атрибуту slot). Якщо тег має атрибут slot
з іменем, якому нема відповідного <slot name="…"></slot> в тіньовому DOM, то
такий тег не відображатиметься браузером у розгорнутому DOM.

Якщо є два і більше теги з однаковим атрибутом slot, вони усі попадуть в <slot>
тіньового дерева в порядку їх розташування.

Якщо є два і більше <slot> з однаковим атрибутом name, то вміст тегу світлого
дерева попаде тільки в перший слот тіньового.

Оскільки вузли світлого дерева не копіюються, а тільки відображаються в слотах,
то зміни в них видні одразу, оновлювати нічого не треба.


ПОДІЇ ТІНЬОВОГО ДЕРЕВА
----------------------

slotchange - якщо код компонента хоче дізнатися про зміни в світлому дереві, це
             можливо зробити через відслідковування змін у слотах. Ця подія
             спрацьовує також при рендерингу сторінки, коли в пустий слот
             вставляється контент. Подія не спрацьовує, якщо змінюється не сам
             слот, а вміст елемента, який знаходиться в слоті.

shadowRoot не може мати обробників подій! Тому події навішують на першу дитину:

    shadowRoot.firstElementChild.addEventListener(…);


Переважна більшість подій спливають з тіні у світло.

event.composedPath() // повертає масив тегів у порядку сплиття події, щось на
                     // зназок [span, slot, div, shadow-root, user-card, body,
                     // html, document, window].

event.composed       // true - подія спливає з тіні,
                     // false - подія не спливає


Під час генерації своїх подій для сплиття події у світле дерево у методі
dispatchEvent потрыбно прописати прапори bubbles і composed в true.


SLOTS API (тільки при {mode: 'open'})
-------------------------------------

node.assignedSlot                         // повертає елемент <slot>, в якому
                                          // знаходиться node.

slot.assignedNodes({flatten: boolean})    // DOM-вузли, які знаходяться в слоті.
                                          // flatten - default false, true -
                                          // перегляд розгорнутого DOM глибше і
                                          // повернення вкладених слотів, якщо є
                                          // вкладені компоненти, і резервний
                                          // контент, якщо в слоті нема вузлів.

slot.assignedElements({flatten: boolean}) // DOM-елементи, які знаходяться в
                                          // слоті.


СТИЛІЗАЦІЯ ТІНЬОВОГО ДЕРЕВА
---------------------------

1. Селектор :host

    <template id="tmpl">
      <style>
        :host { … }
      </style>
      <slot></slot>
    </template>

    <script>
    customElements.define('custom-dialog', class extends HTMLElement {
      connectedCallback() {
        this.attachShadow({mode: 'open'}).append(tmpl.content.cloneNode(true));
      }
    });
    </script>

    <custom-dialog>
      Hello!
    </custom-dialog>


Стиль документа має перевагу над :host, якщо властивість не позначена через
!important


2. Селектор :host(selector)

   спрацьовує для батьківського елемента тільки якщо він підходить по селектору.
   Напр. :host([attr]) спрацьовує тільки для <my-tag attr></my-tag>


3. Селектор :host-context(selector)

   те саме, що і :host(selector), але спрацює, якщо селектор підходить для
   батьківського елемента, або для когось із його зовнішніх предків зі світлого
   дерева, наприклад :host-context(.dark-theme) для <body class="dark-theme">.


4. Елементи з атрибутом slot знаходяться у світлому дереві, тому стилі темного
   на них не діють. Для їх стилізації можна або стилізувати <slot> із
   розрахунком на каскадність, або використати псевдоклас ::slotted(selector).
   Цей псевдоклас не може опускатися в глиб слоту, та використовуватися в
   querySelector (а тільки в CSS).


5. Css-хуки для стилізації тіньових елементів зі сторони світла

   Для цього в тіньових стилях замість властивості прописують змінну з двома --
   в назві. Це дає змогу змінювати властивості ззовні.

    <template id="tmpl">
      <style>
        .field {
          color: var(--user-card-field-color, black);
        }
      </style>
      …
    </template>

    <style>
      user-card {
        --user-card-field-color: green;
      }
    </style>


