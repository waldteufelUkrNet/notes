IndexedDB
================================================================================

ЩО ЦЕ ТАКЕ
----------

IndexedDB - браузерна, локальна база даних. Для додатків клієнт-сервер занадто
потужна, підходить для офлайн додатків, сумісна із ServiceWorkers та іншими
технологіями. Підтримує транзакції, запити в діапазоні ключів та індекси.
Інтерфейс заснований на подіях. Прив'язана до джерела протокол://домен:порт.
На відміну від серверних баз даних має систему версійності.


СПЕЦИФІКАЦІЯ
------------
https://www.w3.org/TR/IndexedDB


СТВОРЕННЯ БАЗИ ДАНИХ
--------------------

створення об'єкту-обгортки для бази даних (клас IDBOpenDBRequest):

    let openRequest = indexedDB.open('name', version);

власне база даних знаходиться за адресою openRequest.result, але пряме звернення
до завершення роботи обробника onsuccess не можливе, воно викликає помилку.
Виклик можливий в обробнику onsuccess або через setTimeout, коли обробник уже
відпрацював.


ПОДІЇ ОБ'ЄКТУ-ОБГОРТКИ openRequest
----------------------------------

onsuccess       // БД готова до роботи, готовий об'єкт openRequest.result

onerror         // не вдалося відкрити БД, об'єкт помилки записується у
                // властивість openRequest.error

onupgradeneeded // БД відкрита, але потребує оновлення. Спрацьовує, коли:
                // 1. локальна версія БД менше, ніж оголошена в .open(),
                // 2. БД ще не існує (так можна ініціалізувати БД).
                // Після завершення роботи викликає onsuccess.

onblocked       // спрацьовує під час спроби оновлення БД (onversionchange),
                // якщо з'єднання з БД не було попередньо закрите (напр.
                // відкрита ще одна вкладка)


Аргументом функцій цих подій буде об'єкт події, який поміж інших властивостей
матиме властивість target, що посилатиметься на об'єкт-обгортку
IDBOpenDBRequest. Тобто:

    arg.target.result === openRequest.result; // для onsuccess
    arg.target.error  === openRequest.error;  // для onerror


ВЛАСТИВОСТІ ОБ'ЄКТУ-ОБГОРТКИ openRequest
----------------------------------------

error       // сюди записується помилка відкриття БД
readyState  // pending -> done
result      // БД, доступна в onsuccess або після його завершення
source      // 
transaction // 


ПОДІЇ БД (openRequest.result)
-----------------------------

onerror         // 
onabort         // 
onclose         // 
onversionchange // спрацьовує при спробі оновити БД, потрібно закрити з'вязок з
                // БД через db.close();


ВЛАСТИВОСТІ БД (openRequest.result)
-----------------------------------

name             // ім'я, вказане під час створення об'єкту-обгортки
version          // версія БД
objectStoreNames // список сховищ, має метод .contains(name);


ВИДАЛЕННЯ БАЗИ ДАНИХ
--------------------

    let deleteRequest = indexedDB.deleteDatabase('name');

    deleteRequest.onsuccess // відслідковує результат видалення БД
    deleteRequest.onerror   // відслідковує результат видалення БД


ЗАКРИТТЯ ЗВ'ЯЗКУ З БД
---------------------

    db.close();


СХОВИЩЕ ОБ'ЄКТІВ
----------------

Є аналогом таблиць в серверних БД. Ключі даних в сховищі можуть бути наступних
типів: Number, Date, String, Binary, Array. Сховища можна створювати/змінювати тільки при оновленні БД в обробнику onupgradeneeded.


СТВОРЕННЯ СХОВИЩА ОБ'ЄКТІВ
---------------------------

    db.createObjectStore(name[, keyOptions]);

    // name - ім'я сховища
    // keyOptions - {
    //   keyPath : 'string',   // шлях до властивості об'єкта, яка буде ключем
    //   autoIncrement : true, // для нових значень ключ формуватиметься
    // }                       // автоматично через інкремент


Якщо при створенні сховища не вказати ключ, то його доведеться вказувати потім,
при збереженні об'єкта.


ВИДАЛЕНЯ СХОВИЩА ОБ'ЄКТІВ
-------------------------

db.deleteObjectStore('name');


ТРАНЗАКЦІЇ
----------

Усі операції з даними можуть бути здійснені тільки всередині транзакцій!

    db.transaction(store[, type]); // store - ім'я сховища (або масив сховищ)
                                   // type  - тип транзакції:
                                   //         readonly, default
                                   //         readwrite

Також є додатковий системний тип транзакції: versionchange. Цей тип може робити
читання/запис, його не можливо викликати вручну. Викликається, коли
відкривається база даних в обробнику upgradeneeded. Це єдине місце, де можливо
оновити структуру бази даних, додавати/видаляти сховища.

Транзакція завершується автоматично, коли усі запити оброблені і черга
мікрозадач пуста.

Не можливо вставити в середину транзакції асинхронний код.



ПОРЯДОК ДОДАВАННЯ ЕЛЕМЕНТА В СХОВИЩЕ
------------------------------------

    let transaction = db.transaction('store','readwrite'),
        store       = transaction.objectStore('store'),
        item        = {…},
        request     = store.add(item);

    request.onsuccess = function() {…};
    request.onerror = function() {…};


існує 2 методи додавання елементу в сховище:

    put(value[, key]) // якщо є значення з таким ключем, його буде замінено
    add(value[, key]) // якщо є значення з таким ключем, буде згенеровано
                      // помилку.
                      // key потрібно вказати, якщо при створенні сховища
                      // не було вказано keyPath або autoIncrement


Скасування транзакції
---------------------

    transaction.abort();


Обробник успішно завершеної транзакції
--------------------------------------

    transaction.oncomplete = function() {…};


Внаслідок помилки в запиті транзакція скасовується повністю. Якщо всеж таки
необхідно продовжити транзакцію, в обробнику помилки потрібно скасувати дію за
замовчуванням:

    let request = transaction.objectStore('store').add(item);
    request.onerror = function(event) {
      if (request.error.name == "ConstraintError") {
        event.preventDefault();
      } else {
        …
      }
    };


Події БД спливають: запит -> транзакція -> база даних. Тому можна встановити
один обробник помилок на базу даних:

    db.onerror = function(event) {
      let request = event.target; // запит, в якому відбулася помилка
      event.stopPropagation();    // можна скасувати сплиття події, якщо помилка
    }                             // уже оброблена


ПОШУК ПО КЛЮЧАХ
---------------

Діапазони
---------

IDBKeyRange.lowerBound(lower, [open]) // >lower (≥lower, якщо open = true)
IDBKeyRange.upperBound(upper, [open]) // <upper (≤upper, якщо open = true)
IDBKeyRange.bound(lower, upper, [lowerOpen], [upperOpen]) // між lower та upper
IDBKeyRange.only(key)                 // діапазон з одного ключа


Методи пошуку
-------------

query - точковий ключ або діапазон


store.get(query)                   // пошук першого значения
store.getAll([query], [count])     // пошук усіх значень, можно обмежити,
                                   // передавши count.
store.getKey(query)                // пошук першого ключа, який задовільняє
                                   // запит, зазвичай передається діапазон.
store.getAllKeys([query], [count]) // пошук усіх ключів, які задовільняють
                                   // запит, зазвичай передається діапазон,
                                   // можно обмежити, передавши count.
store.count([query])               // отримати загальну кількість ключів, які
                                   // задовільняють запит, зазвичай передається
                                   // діапазон.


ПОШУК ПО ІНДЕКСОВАНОМУ ПОЛЮ
---------------------------

Для пошуку по  полях потрібно створити додаткову структуру даних - індекс.
Індекси створюються в upgradeneeded:

    objectStore.createIndex(name, keyPath, [options]);
                           // name    : ім'я індекса
                           // keyPath : шлях до поля об'єкта
                           // options :
                           // {unique    : boolean,
                           // multiEntry : boolean}
                           // якщо unique: true, то у сховищі може бути тільки 1
                           // об'єкт з keyPath, інакше - помилка
                           // multiEntry тільки якщо keyPath є масивом, індекс
                           // обробляє весь масив як ключ, якщо true - індекс
                           // зберігатиме список об'єктів сховища для кожного
                           // значення в масиві.

Схема пошуку:
-------------

    let transaction = db.transaction('store'); // readonly
    let store = transaction.objectStore("store");
    let index = store.index("index_name");

    let request = index.getAll(query);

    request.onsuccess = function() {
      if (request.result !== undefined) {
        console.log("результат", request.result);
      } else {
        …
      }
    };


ВИДАЛЕННЯ ЗІ СХОВИЩА
--------------------

story.delete('id'); // видалити конкретний елемент по ключу

story.clear();      // видалити все


КУРСОРИ
-------

Об'єкт курсор іде по сховищу об'єктів із заданим query і повертає пари ключ/
значення не всі одразу, а по черзі. Це дозволяє економити пам'ять.
Використовують замість getAll, якщо база дуже велика і стандартний пошук може
забрати усю пам'ять. Основна відмінність в тому, що в курсорах request.onsuccess
генерується багаторазово.

    // аналог getAll
    let request = store.openCursor(query, [direction]);

    // аналог getAllKeys
    let request = store.openKeyCursor(query, [direction]);

direction:
    "next"                     // за замовчуванням, курсор буде проходити від
                               // самого маленького ключа до більшого.
    "prev"                     // зворотній порядок: від самого більшого ключа
                               // до меншого.
    "nextunique", "prevunique" // те саме, але курсор пропускає записи з тим же
                               // ключем, що уже був.


МЕТОДИ КУРСОРІВ
---------------

cursor.advance(count)  // посунути курсор на count позицій, пропустивши значення
cursor.continue([key]) // посунути курсор до наступного значення в діапазоні
                       // відповідності (або до позиції одразу після ключа key,
                       // якщо він вказаний).
