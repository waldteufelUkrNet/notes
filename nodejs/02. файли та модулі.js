////////////////////////////////////////////////////////////////////////////////

// Підключення модулів
  // через директиву require():
  const module = require('./file.js');
  const module = require('./file');

  // через підключення ES6-модулів
  import { something } from './file.js'

// Для того, щоб запрацювало підключення ES6-модулів, в package.json потрібно
// додати рядок

  {
    "type": "module"
  }

// У модулів Node.js нема спільної області видимості. Для передачі даних з
// одного модуля у інший, використовується об'єкт exports, а ті дані, які
// потрібно передати, прописуються властивостями цього об'єкту. Цей об'єкт стає
// резутьтатом виклику require() в модулі-акцепторі.

  // файл-донор (модуль):
  exports.key = value;

  // файл-акцептор:
  const someData = require('./file.js'); // отриманий об'єкт від експорта
  console.log(someData.key)              // value


// Для створення глобальних змінних (без потреби використовувати об'єкт exports):

  // файл-донор (модуль):
  global.key = value;   // global замість window

  // файл-акцептор:
  require('./file.js'); // результат виклику можна не вписувати у змінну, бо
                        // знінні все-одно глобальні
  console.log(key)      // value - змінна доступна напряму, як змінна key, а не
                        // властивість об'єкту object.key


// Типи модулів:
// 1. file.js
// 2. file.node - компіляція файла на C++, потрібні для високої продуктивності
//    або для звернення до тих функцій компа, до яких не можна достукатися через
//    js
// 3. file.json (не вимагає exports?)
// 4. dir/index


// Порядок пошуку файлів в Node.js

// коли є такий запис:

  let someData = require('./file');

// 1. Node.js спочатку шукає файл file
// 2. потім шукає файл file.js/file.node/file.json
// 3. потім шукає теку file і хоче там знайти файл index.js, вважає його модулем
// 4. node_modules різних рівнів вкладеності, починаючи з найглибшого
// 5. NODE_PATH
//    Для windows: set NODE_PATH=.
//    Якщо ввести цю команду, надалі модулі-директорії можна підключати без
//    шляхів, тільки по імені (назві теки, де є index.js/index.node)

// Модулі в Node.js зроблені таким чином, що перший раз вони читаються, для них
// створюються відповідні об'єкти module, а при повторних викликах модуль не
// використовується, а іде звернення в кеш до об'єкта. Тому, щоб зміни в коді
// стали видні в браузері, сервер потрібно перезапустити.


// Sublime + cmd (локальна машина):
// 1. Запустити в cmd команду node file_name.js
// 2. При змінах коду Ctrl+C - зупинка сервера, потім знову node file_name.js
// 3. Оновити браузер

// WebStorm (локальна машина):
// 1. Потрібно зробити конфігурацію сервера: зверху справа натиснути "Edit
// Configurations…", у боковому меню попапа вибрати елемент під Node.js. В полі
// "Node interpreter" повинен бути вказаний шлях до node.exe, в "Working
// directory" - шлях до робочої директорії проекту, а в "JavaScript.file" - ім'я
// файлу з написаним сервером. Поставити пташку на "Single instance only" - це
// для того, щоб WebStorm не пробував запускати сервер щоразу новий (все одно
// буде помилка EADDRINUSE: address already in use), а зупиняв старий і лише
// потім запускав новий.
// 2. Запустити локальний сервер (кнопка play)