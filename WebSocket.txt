WebSocket
================================================================================

ЩО ЦЕ ТАКЕ
----------

WebSocket - сучасний спосіб організувати постійний зв'язок клієнт - сервер. Не
має крос-доменних обмежень.

СПЕЦИФІКАЦІЯ WebSocket
----------------------
RFC 6455
https://tools.ietf.org/html/rfc6455

бібліотека для роботи з WebSocket (Node.js WebSocket library)
https://github.com/websockets/ws


ІНІЦІАЛІЗАЦІЯ
-------------

    let socket = new WebSocket("ws://url");

Також існує wss:// (по аналогії з http/https)більш надійний, оскільки:
1. шифрує дані
2. старі проксі-сервери не розпізнають заголовки ws:// і закривають з'єднання,
   а wss:// усе шифрує, тому проксі-сервери не розуміють, що передають,
   і пропускають дані.

Запит WebSocket не можливо емулювати через XMLHttpRequest fetch, бо JS не
дозволяє встановлювати заголовки запиту, потрібні для WebSocket.


МЕТОДИ WebSocket
---------------

    socket.send(data);              // відправка текстових (String) або бінарних
                                    // даних (Blob, ArrayBuffer)

    socket.close([code], [reason]); // закриття з'єднання
                                    //   code - цифровий код, напр. 1006, список
                                    //   https://tools.ietf.org/html/rfc6455#section-7.4.1
                                    //   reason - рядок з описом причини


ПОДІЇ WebSocket
---------------

    open    // з'єднання встановлене

    message // дані отримані
            //     event.data - отримані дані (String/Blob/ArrayBuffer)

    error   // помилка
            //     error.message - тіло помилки

    close   // з'єднання закрите
            //     event.code - код закриття
            //     event.reason - причина закриття


ВЛАСТИВОСТІ WebSocket
---------------------

При отриманні бінарних даних Blob є значенням за замовчуванням. Якщо його треба
замінити на ArrayBuffer:

    socket.bufferType = "arraybuffer";
    socket.onmessage = (event) => {
      // event.data (String/ArrayBuffer)
    };


Якщо швидкість передачі даних маленька, то при повторних socket.send(data) дані
будуть буферизуватися у пам'яті і надсилатися зі швидкістю, яку дозволяє мережа.
Для визначення наявності/кількості буферизованих даних:

    socket.bufferedAmount;


Стан з'єднання:

    socket.readyState // 0 – «CONNECTING»: з'єднання ще не встановлено,
                      // 1 – «OPEN»: обмін даними,
                      // 2 – «CLOSING»: з'єднання закривається,
                      // 3 – «CLOSED»: з'єднання закрите.