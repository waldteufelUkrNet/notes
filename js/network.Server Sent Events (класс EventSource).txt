Server Sent Events (клас EventSource)
================================================================================

ЩО ЦЕ ТАКЕ
----------

Server Sent Events - сучасний спосіб організувати постійний односторонній
зв'язок сервер - клієнт. Підтримує крос-доменні запити.


СПЕЦИФІКАЦІЯ Server Sent Events
-------------------------------

https://html.spec.whatwg.org/multipage/server-sent-events.html#the-eventsource-interface


ВІДМІННОСТІ МІЖ Server Sent Events ТА WebSocket
-----------------------------------------------
1. SSE працює тільки в одну сторону сервер -> клієнт.
2. SSE передає лише текст, WS - і текст і бінарні дані.
3. SSE використовує протокол HTTP, WS - протокол WebSocket.
4. SSE підтримує автоматичне перепідключення при втраті зв'язку. Для WS його
   потрібно реалізовувати додатково.


ІНІЦІАЛІЗАЦІЯ
-------------

Браузер відкриває з'єднання і підтримує його відкритим, очікуючи на подію.
Сервер відповідає зі статусом 200 і заголовком Content-Type: text/event-stream.

    let eventSource = new EventSource('url');


ФОРМАТ ПОВІДОМЛЕНЬ
------------------

1. Повідомлення розділяються подвійним переносом рядка \n\n.
2. Текст повідомлення вказується після "data:".
3. Щоб розділити повідомлення на декілька рядків, потрібно відправити декілька
   "data:" підряд.
4. Повідомлення можна відсилати у форматі JSON:

    data: {"user":"Джон","message":"Перший рядок\n Другий рядок"}


ПОДІЇ Server Sent Events
------------------------

onopen / .addEventListener('open', ...);

onmessage / .addEventListener('message', ...);

    let eventSource = new EventSource("url");
    eventSource.onmessage = function(event) {
      console.log("Нове повідомлення", event.data);
    };

onerror / .addEventListener('error', ...);


Також сервер може вказати інший тип події, який можно обробити:

    event: randomName
    data: text
    id: 1

    eventSource.addEventListener('randomName', event => {
      ...
    });


НАЛАШТУВАННЯ КРОС-ДОМЕННОСТІ
----------------------------

На браузерний заголовок Origin сервер повинен відповісти заголовком
Access-Control-Allow-Origin.
Для відправки авторизаційних даних потрібно встановити додаткову опцію:

    let source = new EventSource("https://another-site.com/events", {
      withCredentials: true
    });


ПЕРЕПІДКЛЮЧЕННЯ
---------------

За замовчуванням між спробами відновити з'єднання буде невелика пауза у декілька
секунд. Сервер може виставити рекомендовану затримку в мілісекундах, браузер
повинен її витримувати:

    retry: 15000
    data: Текст повідомлення


Якщо сервер хоче припинити спроби перепідключення, він відповідає зі статусом
204. Якщо браузер - він викликає метод:

    eventSource.close();


Перепідключення не буде, якщо:
1. У відповіді не вірний Content-Type.
2. Статус відповіді не 301, 307, 200, 204. Спрацює подія "error".


Перевідкрити остаточно закрите з'єднання не можливо. Потрібно відкривати нове.


ІДЕНТИФІКАТОР ПОВІДОМЛЕННЯ
--------------------------

Для коректного перепідключення і запобігання втраті повідомлень кожне
повідомлення повинно мати id, яке повинно міститися після data:

    data: Повідомлення 1
    id: 1

    data: Повідомлення 2
    id: 2

Коли браузер отримує повідомлення з id, то записує його у властивість
eventSource.lastEventId, а при перепідключенні надсилатиме заголовок
Last-Event-ID зі значенням, взятим з eventSource.lastEventId.

СТАСУС ПІДКЛЮЧЕННЯ
------------------

    eventSource.readyState // 0 – підключення або перепідключення,
                           // 1 – «OPEN»: підключено,
                           // 2 – «CLOSED»: з'єднання закрите.