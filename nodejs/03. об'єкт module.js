////////////////////////////////////////////////////////////////////////////////

// Об'єкт module є змінною, яка присутня в кожному файлі-модулі. У цієї змінної
// є важлива властивість

  module.parent

// яка вказує на модуль, який запустив виконання даного модуля. Цю властивість
// можна використовувати для того, щоб викликати модуль по різному - або як
// самостійний модуль, або як частину більшого функціоналу з іншого модуля

  function run() {…}

  if (module.parent) { // якщо модуль запущений іншим модулем - передати функціонал
    exports.run = run; // там його треба буде запускати як someVariable.run()
  } else {
    run();             // якщо модуль запускається самостійно - виконати
  }


// Передача у зовнішній код функціоналу модуля: module.exports

  module.exports == exports == this

// module.exports - це реальний об'єкт, який потрапляє назовні з модуля
// exports - змінна, посилання на об'єкт module.exports
// this - в контексті модуля = exports, тобто лише посилання на реальний об'єкт

// тому при експорті можна писати:

  module.exports.key = value
  exports.key = value        // це найоптимальніший варіант
  this.key = value

// Якщо потрібно експортувати щось одне, напр. функцію, то для того, щоб в
// require() потрапляв не проміжний об'єкт з властивістю-функцією, а одразу
// напряму функція, потрібно перезатерти об'єкт module.exports:

  function User(){…}
  module.exports = User
  exports = User       // так не спрацює, бо exports є лише змінною-посиланням
                       // на об'єкт, якщо її змінити, то буквально зміниться
                       // адреса, на яку буде вказувати змінна, сам же об'єкт
                       // залишиться незмінним


// Модуль-фабрикаю Суть полягає в тому, що викликається модуль і йому одразу
// передаються параметри.

  const log = require('logger')(module);