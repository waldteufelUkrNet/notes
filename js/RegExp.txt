RegExp
================================================================================

ЩО ЦЕ ТАКЕ
----------

Регулярні вирази - потужний засіб пошуку і заміни в рядку. Регулярні вирази є
об'єктами вбудованого класу RegExp.


ДОКУМЕНТАЦІЯ ПО RegExp
----------------------

https://developer.mozilla.org/uk/docs/Web/JavaScript/Reference/Global_Objects/RegExp
https://regexr.com


ОГОЛОШЕННЯ
----------

Регулярний вираз складається з шаблона (патерна) та не обов'язкових прапорів.

1. let regexp = new RegExp("шаблон", "прапори");

2. let regexp = /шаблон/прапори;

Різниця в типах оголошення: 2й тип (слеші) не дозволяє використовувати змінні,
він повністю статичний. 1й тип дозволяє використовувати інтерполяцію:

    let tag    = prompt("Який тег потрібно знайти?", "h2"),
        regexp = new RegExp(`<${tag}>`);


ПРАПОРИ
-------

i : пошук не залежить від регістру (А = а);
g : пошук шукає усі співпадіння, без нього - тільки перше;
m : багаторядковий режим, впливає тільки на поведінку якорів ^ таі $;
s : режим "dotall": крапка рівна символу переводу рядка (\n);
u : повна підтримка юнікоду (сурогатні пари тощо);
y : режим пошуку на конкретній позиції в тексті;


ПОШУК str.match(regexp)
-----------------------

    let str = 'Abc abb abc';

    let result1 = str.match(/abc/gi); // [ "Abc", "abc" ]
    let result2 = str.match(/abc/i);  // [ "Abc" ] *
    let result3 = str.match(/bcd/gi); // null **
    __________
    *  - коли нема прапора g, match поверне один елемент у вигляді масиву, цей
         масив матиме додаткові властивості: result2.index (позиція співпадіння)
         result2.input (вихідний рядок)
    ** - коли співпадінь нема, повертається null, якщо потрібен масив:
         let result2 = str.match(/abc/i) || [];


ЗАМІНА str.replace(regexp, replacement)
---------------------------------------

    let str = 'We will, we will';

    // без g
    "We will, we will".replace(/we/i, "I"); // I will, we will

    // з g
    "We will, we will".replace(/we/ig, "I"); // I will, I will


В рядку replacement можна використовувати комбінації:

$&  вставляє усе знайдене співпадіння
$`  вставляє частину рядка до співпадіння
$'  вставляє частину рядка після співпадіння
$n  якщо n 1-2 значне число, вставляє вміст n-ї дужкової групи регулярки
$<name>   вставляє вміст дужкової групи з іменем name
$$  вставляє символ "$"

    "Люблю HTML".replace(/HTML/, "$& і JavaScript"); // Люблю HTML і JavaScript


ПЕРЕВІРКА regexp.test(str)
--------------------------

    let str = "Я ЛюБлЮ JavaScript";
    let regexp = /люблю/i;

    regexp.test(str); // true


СИМВОЛЬНІ КЛАСИ
---------------

Символьні класи - це спеціальне позначення, яке відповідає будь-якому символу з
певного набору.

\d : цифри
\D : не цифри
\s : пробільні символи, таби, нові рядки (\t, \n, \v, \f, \r)
\S : все, крім \s
\w : латиниця, цифри, підкреслення '_'
\W : все, крім \w
.  : будь-який символ, якщо з прапором регулярного виразу s, інакше будь-який
     символ, крім переводу рядка \n


Приклади:
---------

перша цифра в номері телефона:

    let str = "+7(903)-123-45-67";
    let regexp = /\d/;
    alert( str.match(regexp) ); // 7

усі цифри з номера телефона:

    let str = "+7(903)-123-45-67";
    let regexp = /\d/g;
    alert( str.match(regexp) ); // массив совпадений: 7,9,0,3,1,2,3,4,5,6,7
    alert( str.match(regexp).join('') ); // 79035419441

усі цифри з номера телефона (видалити не цифри):

    let str = "+7(903)-123-45-67";
    alert( str.replace(/\D/g, "") ); // 79031234567

регулярні вирази можуть мати як символи, так і символьні класи, в тому числі
кілька класів:

    \d\s\w - цифра, за якою іде пробіл і символ, напр. '1 a'
    CSS\d  - рядок 'CSS' + цифра

    alert( "I love HTML5!".match(/\s\w\w\w\w\d/) ); // ' HTML5'

крапка - будь-який символ, крім \n:

    let regexp = /CS.4/;
    alert( "CSS4".match(regexp) ); // CSS4
    alert( "CS-4".match(regexp) ); // CS-4
    alert( "CS 4".match(regexp) ); // CS 4
    alert( "CS4".match(regexp) );  // null
    alert( "A\nB".match(/A.B/) );  // null

крапка - будь-який символ, якщо з прапором s:

    alert( "A\nB".match(/A.B/s) ); // A\nB


ПІДТРИМКА UNICODE. КОНСТРУКЦІЯ \p{…}
------------------------------------

Для роботи з юнікодом потрібер прапор u!

У кожного символа в юнікоді є багато властивостей, що містять додаткову
інформацію про символ. В регулярних виразах можна шукати символ за цими
властивостями, використовуючи конструкцію \p{…}

    \p{Letter} (або \p{L}) // буква будь-якої мови


    let str = "A ბ ㄱ";
    alert( str.match(/\p{L}/gu) ); // A,ბ,ㄱ
    alert( str.match(/\p{L}/g) ); // null


Категорії символів (основні):
-----------------------------

  Букви L:
      Ll нижній регістр
      Lm модифікатори
      Lt заголовні букви
      Lu верхній регістр
      Lo інше

  Числа N:
      Nd десяткові цифри,
      Nl цифри, позначені буквами (римські)
      No інше

  Знаки пунктуації P:
      Pc з'єднувальні
      Pd тире
      Pi відкриваючі лапки
      Pf закриваючі лапки
      Ps відкриваючі дужки
      Pe закриваючі дужки
      Po інше

  Відмітки M:
      Mc двокрапки
      Me вкладення
      Mn апострофи

  Символи S:
      Sc валюти
      Sk модифікатори
      Sm математичні
      So інше

  Розділювачі Z:
      Zl лінія
      Zp параграф
      Zs пробіл

  Інше C:
      Cc контрольні
      Cf форматування
      Cn не призначене
      Co для приватного використання
      Cs суррогати


ЯКОРЯ
-----

^ : співпадіння з початком тексту,
$ : співпадіння з кінцем тексту

    let str1 = "Mary had a little lamb";
    alert( /^Mary/.test(str1) ); // true
    alert( /lamb$/.test(str1) ); // true

^+$: повне співпадіння шаблона і рядка:

    let goodInput = "12:34",
        badInput  = "12:345",
        regexp    = /^\d\d:\d\d$/;
    alert( regexp.test(goodInput) ); // true
    alert( regexp.test(badInput) );  // false


При включеному багаторядковому режимі (прапор m) пошук здійснюється не по
початку/кінцю текста, а по початку/кінцю кожного рядка.

    let str = `1е место: Винни
               2е место: Пятачок
               3е место: Слонопотам`;
    alert( str.match(/^\d/gm) ); // 1, 2, 3

    let str = `Винни: 1
               Пятачок: 2
               Слонопотам: 3`;
    alert( str.match(/\d$/gm) ); // 1,2,3


МЕЖА СЛОВА \b
-------------

Межею слова є:
1. Початок тексту з першим символом \w
2. В середині тексту, якщо зліва \w, а справа - не \w, або навпаки
3. Кінець тексту з останнім символом \w

    alert( "Hello, Java!".match(/\bJava\b/) ); // Java
    alert( "Hello, JavaScript!".match(/\bJava\b/) ); // null

    alert( "1 23 456 78".match(/\b\d\d\b/g) ); // 23,78


ЕКРАНУВАННЯ
-----------

\ : екранування спецсимволів [ \ ^ $ . | ? * + ( ) /

    .  - спецсимвол
    \. - крапка
    (  - спецсимвол
    \( - дужка
    \  - спецсимвол
    \\ - коса риска

    console.log( "Глава 5.1".match(/\d\.\d/) ); // 5.1
    console.log( "Глава 511".match(/\d.\d/) );  // 511
    console.log( "Глава 511".match(/\d\.\d/) ); // null


Особливості екранування new RegExp
----------------------------------

1. Символ шаблону екранувати не потрібно:

    console.log( "/".match(/\//) ); // '/'
    console.log( "/".match(new RegExp("/")) ); // тут екранування не потрібне

2. Символ екранування потрібно подвоювати:

let regexp1 = new RegExp("\d\.\d");
console.log( "Глава 5.1".match(regexp1) ); // null
let regexp2 = new RegExp("\\d\\.\\d");
console.log( "Глава 5.1".match(regexp2) ); // 5.1